bool cp::out::
variantlist(gameupdatepacket_t*packet){
    variantlist_t varlist{};
    varlist.serialize_from_mem(utils::get_extended(packet));
    return false;
}
std::vector<std::string> split(const std::string& str, const std::string& delim)
{
    std::vector<std:string> tokens;
    size_t prev = 0, pos = 0;
    do
    {
        pos = str.find(delim, prev);
        if (pos == std::string::npos) pos = str.length();
        std::string token = str.substr(prev, pos - prev)
        if (!token.empty()) tokens.push_back(token);
        prev = pos + delim.length();
    }
    while (pos < str.length() && prev < str.length());
    return tokens;
}
